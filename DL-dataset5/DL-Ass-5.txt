## Importing libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score

## Importing dataset
dataset = pd.read_csv('Downloads/Restaurant_Reviews.tsv.txt',delimiter='\t',quoting=3)

## Cleaning the texts


nltk.download('stopwords')
#Stopwords are the words which will not help the algo. in any way. e.g a, an, the, he, she, it ...etc

corpus = []
for i in range(0, 1000):
    #Replace all non-letters by spaces
    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
    #Convert uppercases to lowercases
    review = review.lower()
    #Split all words in a review in a list
    review = review.split()
    #Stem words in a list e.g Loved is same as Love. So here we would convert all the words in present tense.
    ps = PorterStemmer()
    all_stopwords = stopwords.words('english')
    #Remove 'not' from stopwords
    all_stopwords.remove('not')
    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
    review = ' '.join(review)
    corpus.append(review)

print(corpus)

## Creating the Bag of Words model

cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

## Splitting the dataset into the Training set and Test set


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

## Training the Naive Bayes model on the Training set


classifier = GaussianNB()
classifier.fit(X_train, y_train)

## Predicting the Test set results

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

## Making the Confusion Matrix


cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

